import numpy as np

def lp_norm(v, p):
    if p <= 0:
        raise ValueError("Параметр p должен быть положительным числом.")

    # Вычисляем сумму абсолютных значений элементов, возведённых в степень p
    sum_abs_p = np.sum(np.abs(v) ** p)

    # Возвращаем результат, возводя сумму в степень 1/p
    return sum_abs_p ** (1 / p)

# Пример использования
if __name__ == "__main__":
    # Создаём случайный вектор
    vector = np.array([3.0, -1.0, 2.0, 1.0])

    # Вычисляем L1-норму (p = 1)
    l1_norm = lp_norm(vector, 1)
    print(f"L1-норма: {l1_norm}")

    # Вычисляем L2-норму (p = 2)
    l2_norm = lp_norm(vector, 2)
    print(f"L2-норма: {l2_norm}")




import numpy as np

def total_variation(u, p):
    if p < 1:
        raise ValueError("Параметр p должен быть больше или равен 1.")

    # Вычисляем горизонтальные и вертикальные разности
    # Функция np.diff вычисляет разности между соседними элементами массива вдоль указанной оси
    # Дополнение до 100×100 необходимо для того, чтобы массивы dx и dy имели одинаковый размер, что позволяет корректно вычислить их сумму.
    # Без этого шага программа не смогла бы выполнить сложение массивов, так как они имели бы разные размеры после применения np.diff.
    dx = np.abs(np.diff(u, axis=1))[:, :+1]
    dy = np.abs(np.diff(u, axis=0))[:+1, :]

    # Вычисляем сумму абсолютных значений разностей, возведённых в степень p
    tv_sum = np.sum((dx ** p) + (dy ** p))

    # Возвращаем результат, возводя сумму в степень 1/p
    return tv_sum ** (1 / p)

# Пример использования
if __name__ == "__main__":
    # Создаём случайное изображение
    image = np.random.rand(10, 7)

    # Вычисляем полную вариацию с L1-нормой (p = 1)
    tv_l1 = total_variation(image, 1)
    print(f"Полная вариация с L1-нормой: {tv_l1}")

    # Вычисляем полную вариацию с L2-нормой (p = 2)
    tv_l2 = total_variation(image, 2)
    print(f"Полная вариация с L2-нормой: {tv_l2}")